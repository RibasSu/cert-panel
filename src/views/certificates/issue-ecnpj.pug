extends ../layout

block content
  .row.justify-content-center
    .col-md-10
      .card.border-primary
        .card-header.bg-primary.text-white
          h4.mb-0 Emitir Certificado e-CNPJ
        
        .card-body
          form(action='/certificates/issue/ecnpj', method='POST')
            h5.mb-3 Dados da Empresa
            
            .row.mb-3
              .col-md-6
                label.form-label(for='companyName') Razão Social
                input#companyName.form-control(type='text', name='companyName', value=formData ? formData.companyName : '', required)
              
              .col-md-6
                label.form-label(for='cnpj') CNPJ
                input#cnpj.form-control(type='text', name='cnpj', value=formData ? formData.cnpj : '', placeholder='00.000.000/0000-00', required)
            
            .row.mb-3
              .col-md-6
                label.form-label(for='tradeName') Nome Fantasia
                input#tradeName.form-control(type='text', name='tradeName', value=formData ? formData.tradeName : '', required)
              
              .col-md-6
                label.form-label(for='email') E-mail
                input#email.form-control(type='email', name='email', value=formData ? formData.email : '', required)
            
            h5.mt-4.mb-3 Dados do Responsável Legal
            
            .row.mb-3
              .col-md-6
                label.form-label(for='responsibleName') Nome Completo
                input#responsibleName.form-control(type='text', name='responsibleName', value=formData ? formData.responsibleName : '', required)
              
              .col-md-6
                label.form-label(for='responsibleCpf') CPF
                input#responsibleCpf.form-control(type='text', name='responsibleCpf', value=formData ? formData.responsibleCpf : '', placeholder='000.000.000-00', required)
            
            .row.mb-3
              .col-md-6
                label.form-label(for='responsiblePosition') Cargo
                input#responsiblePosition.form-control(type='text', name='responsiblePosition', value=formData ? formData.responsiblePosition : '', required)
              
              .col-md-6
                label.form-label(for='responsibleBirthDate') Data de Nascimento
                input#responsibleBirthDate.form-control(type='date', name='responsibleBirthDate', value=formData ? formData.responsibleBirthDate : '', required)
            
            h5.mt-4.mb-3 Endereço da Empresa
            
            .row.mb-3
              .col-md-6
                label.form-label(for='state') Estado
                select#state.form-select(name='state', required)
                  option(value='', disabled, selected=!formData) Selecione um estado
                  option(value='AC', selected=formData && formData.state === 'AC') Acre
                  option(value='AL', selected=formData && formData.state === 'AL') Alagoas
                  option(value='AP', selected=formData && formData.state === 'AP') Amapá
                  option(value='AM', selected=formData && formData.state === 'AM') Amazonas
                  option(value='BA', selected=formData && formData.state === 'BA') Bahia
                  option(value='CE', selected=formData && formData.state === 'CE') Ceará
                  option(value='DF', selected=formData && formData.state === 'DF') Distrito Federal
                  option(value='ES', selected=formData && formData.state === 'ES') Espírito Santo
                  option(value='GO', selected=formData && formData.state === 'GO') Goiás
                  option(value='MA', selected=formData && formData.state === 'MA') Maranhão
                  option(value='MT', selected=formData && formData.state === 'MT') Mato Grosso
                  option(value='MS', selected=formData && formData.state === 'MS') Mato Grosso do Sul
                  option(value='MG', selected=formData && formData.state === 'MG') Minas Gerais
                  option(value='PA', selected=formData && formData.state === 'PA') Pará
                  option(value='PB', selected=formData && formData.state === 'PB') Paraíba
                  option(value='PR', selected=formData && formData.state === 'PR') Paraná
                  option(value='PE', selected=formData && formData.state === 'PE') Pernambuco
                  option(value='PI', selected=formData && formData.state === 'PI') Piauí
                  option(value='RJ', selected=formData && formData.state === 'RJ') Rio de Janeiro
                  option(value='RN', selected=formData && formData.state === 'RN') Rio Grande do Norte
                  option(value='RS', selected=formData && formData.state === 'RS') Rio Grande do Sul
                  option(value='RO', selected=formData && formData.state === 'RO') Rondônia
                  option(value='RR', selected=formData && formData.state === 'RR') Roraima
                  option(value='SC', selected=formData && formData.state === 'SC') Santa Catarina
                  option(value='SP', selected=formData && formData.state === 'SP') São Paulo
                  option(value='SE', selected=formData && formData.state === 'SE') Sergipe
                  option(value='TO', selected=formData && formData.state === 'TO') Tocantins
              
              .col-md-6
                label.form-label(for='city') Cidade
                input#city.form-control(type='text', name='city', value=formData ? formData.city : '', required)
            
            h5.mt-4.mb-3 Configurações do Certificado
            
            .row.mb-3
              .col-md-6
                label.form-label(for='p12Password') Senha do Certificado
                input#p12Password.form-control(type='password', name='p12Password', required)
                small.form-text.text-muted Esta senha será necessária para utilizar o certificado
              
              .col-md-6
                label.form-label(for='confirmP12Password') Confirmar Senha
                input#confirmP12Password.form-control(type='password', name='confirmP12Password', required)
            
            h5.mt-4.mb-3 Usuário Associado
            
            .row.mb-3
              .col-md-12
                label.form-label(for='userId') Selecione o Usuário
                select#userId.form-select(name='userId', required)
                  option(value='', disabled, selected) Carregando usuários...
            
            .d-flex.justify-content-between.mt-4
              a.btn.btn-secondary(href='/dashboard')
                i.bi.bi-arrow-left.me-2
                | Voltar
              
              button.btn.btn-primary(type='submit')
                i.bi.bi-save.me-2
                | Emitir Certificado

block scripts
  script.
    // Código JavaScript para emissão de certificado e-CNPJ
    document.addEventListener('DOMContentLoaded', function() {
      // Máscara para CNPJ
      const cnpjInput = document.getElementById('cnpj');
      if (cnpjInput) {
        cnpjInput.addEventListener('input', function(e) {
          let value = e.target.value.replace(/\D/g, '');
          if (value.length > 14) value = value.slice(0, 14);
          
          if (value.length > 12) {
            value = value.replace(/^(\d{2})(\d{3})(\d{3})(\d{4})(\d{2})$/, '$1.$2.$3/$4-$5');
          } else if (value.length > 8) {
            value = value.replace(/^(\d{2})(\d{3})(\d{3})(\d{1,4})$/, '$1.$2.$3/$4');
          } else if (value.length > 5) {
            value = value.replace(/^(\d{2})(\d{3})(\d{1,3})$/, '$1.$2.$3');
          } else if (value.length > 2) {
            value = value.replace(/^(\d{2})(\d{1,3})$/, '$1.$2');
          }
          
          e.target.value = value;
        });
      }
      
      // Máscara para CPF do responsável
      const cpfInput = document.getElementById('responsibleCpf');
      if (cpfInput) {
        cpfInput.addEventListener('input', function(e) {
          let value = e.target.value.replace(/\D/g, '');
          if (value.length > 11) value = value.slice(0, 11);
          
          if (value.length > 9) {
            value = value.replace(/^(\d{3})(\d{3})(\d{3})(\d{2})$/, '$1.$2.$3-$4');
          } else if (value.length > 6) {
            value = value.replace(/^(\d{3})(\d{3})(\d{1,3})$/, '$1.$2.$3');
          } else if (value.length > 3) {
            value = value.replace(/^(\d{3})(\d{1,3})$/, '$1.$2');
          }
          
          e.target.value = value;
        });
      }
      
      // Carregar lista de usuários
      fetch('/certificates/users')
        .then(response => response.json())
        .then(users => {
          const userSelect = document.getElementById('userId');
          userSelect.innerHTML = '<option value="" disabled selected>Selecione um usuário</option>';
          
          users.forEach(user => {
            const option = document.createElement('option');
            option.value = user.id;
            option.textContent = `${user.fullName} (${user.username})`;
            userSelect.appendChild(option);
          });
        })
        .catch(error => {
          console.error('Erro ao carregar usuários:', error);
          const userSelect = document.getElementById('userId');
          userSelect.innerHTML = '<option value="" disabled selected>Erro ao carregar usuários</option>';
        });
    });